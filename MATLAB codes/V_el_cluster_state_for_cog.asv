% (C) Elena Cesnaite, email: e.cesnaite@gmail.com, page: https://www.researchgate.net/profile/Elena-Cesnaite

% This code was created to analyze data described in 'Alterations in rhythmic and non-rhythmic resting-state
% EEG activity and their link to cognition in older age' paper.
% The code estimates correlations between PSD parameters and cognitive performance. Then runs
% cluster statistics to with permutation tests.
% The code was addapted from the version created together with Dr Keyvan
% Mahjoory
% Last updated 22.06.2021

clear all, close all

saveDir = '';
resDir = '';% data directory
eeglab

load(''); % laod 2D channel locations, channel labels, and channel neighbour information

cfg.chanLocs2D = new_2Dlocs_LIFE(:,2:3); % required ONLY for plotting

%%-------------------------------------------------------------------------
%% Initial settings of analysis

resTypeAll= {'iaf'};%,{'slope','power','iaf'}

questName = {'f3'}; % factor scores to be loaded: {'f1','f2', 'f3'}

% variables to regress out
regOutPower = 1;
regOutSlope = 1;
regOutTheta = 1;
regOutAge = 1;
regOutIAF = 0;
regOutSex = 1;
regOutEdu = 1;

cfg.nRnd = 100;   % number of randomization times
cfg.sigThresh = 0.05; % significance level

makeTopoPlot =1;
rmlH = 1; %Right handed subjects

%% =============  Loading Data  ===========================
load([resDir,''])
factorsT = readtable('.csv') % factors derived from Factor analysis define cognitive performance

if strcmp(resTypeAll,'power')
    resMatrix = alpha_pow;
elseif strcmp(resTypeAll,'iaf') 
    resMatrix =  freq;
 
elseif strcmp(resTypeAll,'slope')
    
    resMatrix = slope;
    
end

%% =============  Loading Factors, age, sex and education info  ==================



if strcmp(questName,'f1')
    questData0 = factorsT.Factor1;
elseif strcmp(questName,'f2')
    %factors.Factor2(factors.Factor2>10) = mean(factors.Factor2(factors.Factor2<10))
    questData0 = factorsT.Factor2;
elseif strcmp(questName,'f3')
    questData0 = factorsT.Factor3;
end

%% if regress out smth
% dataD format is Nsub x Nchan

 datD = [];
 regOutLabel = ''
if regOutPower
    datD = [datD alpha_pow];
    regOutLabel = 'Power';
    fprintf('Power was regressed out. \n')
end
  
if regOutSlope
    datD = [datD slope];
    regOutLabel = [regOutLabel, ', ','Slope'];
    fprintf('Slope was regressed out. \n')
end
if regOutIAF
    datD = [datD freq];
    regOutLabel = [regOutLabel, ', ','IAF'];
    fprintf('IAF was regressed out. \n')
end

if regOutTheta
    datD = [datD theta_pow];
    regOutLabel = [regOutLabel, ', ','Theta'];
    fprintf('Theta was regressed out. \n')
end

% dataC format is Nsub x 1
datC = []
regAgeLabel = ''
if regOutAge
    age_cog = str2double(IDs_matched(:,2));
    datC = age_cog;
    regAgeLabel = 'Age';
    fprintf('Age was regressed out. \n')
end
if regOutEdu
    emp = find(cellfun(@isempty,[ID_sex_edu(indx_idS,3)]));
    ID_sex_edu(emp,3) = {nanmean([ID_sex_edu{indx_idS,3}])};
    edu = [ID_sex_edu{indx_idS,3}]
    datC = [datC edu'];
    regAgeLabel = [regAgeLabel, ', ', 'Edu'];
    fprintf('Education was regressed out. \n')
end
if regOutSex
    males = strcmp(ID_sex_edu(indx_idS,2),'male');
    sex_cog_code = males+1; % male - 2, female = 1
    datC = [datC sex_cog_code];
    regAgeLabel = [regAgeLabel, ', ','Sex'];
    fprintf('Sex was regressed out. \n')
end

datA = normalize(questData0)

datB.vals = normalize(resMatrix);
datB.chanLabels = chanLabels;
datB.chanNeighbours = {neighbours.label};
datB.chanNeighbours(2,:) = {neighbours.neighblabel};

%% =============  Correlation & cluster analysis  =========

[clNoPerm, CL, indxPerm] = el_k1_cluster_calc_sensor_LIFE(datA, datB, normalize(datC), normalize(datD), cfg);
plotTitle = ['corr(',char(resTypeAll), ' - ', char(questName),' | ', char(regAgeLabel),' ',char(regOutLabel),') '];

if ~isempty(CL) % No significant cluster
    CLCell = struct2cell(CL');
    pvalClust = length(find( abs(cell2mat(CLCell(2,:))) > abs(clNoPerm.tmax) ))/cfg.nRnd;
    plotTitle = [plotTitle,'  P= ' num2str(pvalClust)];
end


%% =============  Plotting & Saving ==================


if makeTopoPlot
    
    
   allpVal = clNoPerm.pvals;
        rVal = clNoPerm.rvals;
        
        pVal = ones(31,1)
    if isfield(clNoPerm.clusters,'pos') && isempty(clNoPerm.clusters.neg)
         pVal(clNoPerm.clusters.pos.indxMax) = allpVal(clNoPerm.clusters.pos.indxMax);
    elseif isfield(clNoPerm.clusters,'neg') && isempty(clNoPerm.clusters.pos)
         pVal(clNoPerm.clusters.neg.indxMax) = allpVal(clNoPerm.clusters.neg.indxMax);
        
    elseif isfield(clNoPerm.clusters,'neg') && isfield(clNoPerm.clusters,'pos')
        if abs(clNoPerm.clusters.neg.tvalMax) >= abs(clNoPerm.clusters.pos.tvalMax)
            pVal(clNoPerm.clusters.neg.indxMax) = allpVal(clNoPerm.clusters.neg.indxMax);
        else
           pVal(clNoPerm.clusters.pos.indxMax) = allpVal(clNoPerm.clusters.pos.indxMax);
        end
    else
        error('cluster indexing problem!')
    end
    

    
    chanLocs_adjust = cfg.chanLocs2D;
    chanLocs_adjust(30,1)=chanLocs_adjust(30,1)-.15;
    chanLocs_adjust(31,1)=chanLocs_adjust(31,1)+.15;
    
    %chanLocs_adjust = chanLocs_adjust(pl_ch,:);
    
    pB1= zeros(31,1);
    pB2= zeros(31,1);
    
    pB1(pVal<0.05)=1;
    pB2(pVal<0.01)=1; %plots an extra cirle for electrodes with significance level <0.01
    
    
    if max(abs(rVal))>=.45
        cfgPlot.scale = [-max(abs(rVal))-.1  max(abs(rVal))+.1];
    elseif (max(abs(rVal))>.2)&&((max(abs(rVal))<.45))
        cfgPlot.scale = [-.46 .46];
    else
        cfgPlot.scale = [-.21 .21];
    end
    
    
    cfgPlot.marked_electrodes_1=[find(pB1)];
    cfgPlot.marked_electrodes_2=[find(pB2)];%[]
    plotTitle(strfind(plotTitle ,'_') ) = ' ';
    cfgPlot.title = plotTitle;
    cfgPlot.cm=jet(400);
    cfgPlot.cbText='r';
    
    addpath /nobackup/kiribati2/EEG/Scripts/
    figure('color','w'),k1_showfield_LIFE(rVal,chanLocs_adjust,cfgPlot,chanLabels)
    %keyboard
    set(gca,'fontweight','b','fontsize',13)
    text(-0.55,0.65,cfgPlot.title,'fontweight','bold','fontsize',10)
    text(0.9,0,cfgPlot.cbText,'fontweight','bold','fontsize',15)
   
   export_fig([saveDir, char(resTypeAll),'_',char(questName),'_reg_',char(regAgeLabel),'_',char(regOutLabel), '_new'], '-r300', '-a2');
end

tbl=table()
tbl.f3 = normalize(datA);
tbl.iaf =normalize(mean(datB.vals,2));
tbl.slope =normalize(mean(slope,2));
tbl.power =normalize(mean(alpha_pow,2));
tbl.age = normalize(datC(:,1));
tbl.edu = normalize(datC(:,2));
tbl.sex = normalize(datC(:,3));


mdl = fitlm(tbl,'f3 ~(iaf+slope+power)*age+edu+sex')
%plot interaction
fig = figure,plotInteraction(mdl,'iaf','age','predictions')
get(fig)
l = fig.Children(1)
l.Location= 'southwest'
l.FontSize = 12
l.LineWidth = 0.5
p = fig.Children(2)
p.FontSize = 12
p.XLabel.String = 'Age'
p.XLabel.FontSize = 15
p.YLabel.String = '3rd Factor'
p.YLabel.FontSize = 15
p.Title.String = ''

l.String = {'IAF','low', 'mean', 'high'}

% 
% 
% %Load chanlocs
% chanlocs=readlocs('standard_31_electrodes.ced');
%  pVal = clNoPerm.pvals;
%     rVal = clNoPerm.rvals;
%     
% pB2= zeros(31,1);
% pB2(pVal<0.05)=1; %plots an extra cirle for electrodes with significance level <0.01
% marked_electrodes = [find(pB2)];%[]
% 
% %Load Colormap
% coolWarm = load('nbt_CoolWarm.mat')
% coolWarm = coolWarm.coolWarm;
% 
% %Load Data
% input = rVal
% 
% %Plot Figure
% figure;
% fig = topoplot(input, chanlocs, 'maplimits', 'absmax', 'headrad', 'rim', 'whitebk','on', 'emarker2', {[marked_electrodes],'x', 'k'})
% title(char(['Alpha power decrease with age']),'Interpreter', 'none')
% set(get(gca,'title'),'Position',[0 0.6 0.1])
% xlim auto
% ylim auto
% set(gcf,'color','w');
% colormap(coolWarm)
% h = colorbar('WestOutside');
% set(h, 'ylim', [min(rho) max(rho)]), %get min max values of the original scale by typing ylim
% set(get(h,'title'), 'String', 'rho')
% 
